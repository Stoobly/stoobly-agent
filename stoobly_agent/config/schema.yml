cli:
  features:
    dev_tools: bool()
    exec: bool()
    remote: bool()
proxy:
  data: map(include('data_rules'), key=include('project_id'))
  firewall: map(list(include('firewall_rule')), key=include('project_id'))
  match: map(list(include('match_rule')), key=include('project_id'), required=False)
  rewrite: map(list(include('rewrite_rule')), key=include('project_id'))
  intercept:
    active: bool()
    mode: include('mode')
    project_key: str()
  url: str(required=False)
proxy_config_path: str(required=False)
remote: 
  api_url: str()
  api_key: str()
ui:
  active: bool()
  url: str()
---
component: enum('Body Param', 'Header', 'Query Param')
firewall_action: enum('exclude', 'include')
method: enum('DELETE', 'GET', 'OPTIONS', 'POST', 'PUT')
mock_policy: enum('all', 'found', 'none')
mode: enum('mock', 'record', 'replay', 'test')
project_id: str()
record_policy: enum('all', 'found', 'not_found', 'none')
replay_policy: enum('all', 'none')
test_policy: enum('all', 'found', 'none')
test_strategy: enum('custom', 'diff', 'fuzzy')

data_rules:
  mock_policy: include('mock_policy')
  record_policy: include('record_policy')
  replay_policy: include('replay_policy')
  scenario_key: str(required=False)
  test_policy: include('test_policy')
  test_strategy: include('test_strategy')
parameter_rule:
  modes: list(include('mode'), min=1, max=4)
  name: str()
  type: str()
  value: str(required=False)
rewrite_rule:
  methods: list(include('method'))
  pattern: str()
  parameter_rules: list(include('parameter_rule'))
  url_rules: list(include('url_rule'))
  port: str()
url_rule:
  host: str()
  modes: list(include('mode'), min=1, max=4)
  path: str()
  port: str()
  scheme: str()
firewall_rule:
  action: include('firewall_action')
  methods: list(include('method'))
  modes: list(include('mode'), min=1, max=4)
  pattern: str()
match_rule:
  components: include('component')
  methods: list(include('method'))
  modes: list(include('mode'), min=1, max=4)
  pattern: str()
